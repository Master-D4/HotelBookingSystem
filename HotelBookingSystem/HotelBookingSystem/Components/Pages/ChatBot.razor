@page "/chat"
@rendermode InteractiveServer

@using System.Globalization
@using HotelBookingSystem.Models
@using HotelBookingSystem.Services
@inject PredictionEngine Predictor
@inject MemoryStore Store

<h3 class="mb-4">Chat with Assistant Bot</h3>

<div class="card p-3 mb-3" style="max-height: 400px; overflow-y: auto">
    @foreach (var msg in chatHistory)
    {
        <div class="mb-2">
            <strong>You:</strong>
            @msg.Question
            <div>
                <strong>Bot:</strong>
                @msg.Response
            </div>
        </div>
    }
</div>

<div class="input-group">
    <InputText @bind-Value="userQuestion" class="form-control" placeholder="Ask about room availability or prices.." />
    <button class="btn btn-primary" @onclick="AskBot">
        Ask
    </button>
</div>

@code {
    private string userQuestion = string.Empty;
    private List<ChatEntry> chatHistory = new();

    class ChatEntry
    {
        public string Question { get; set; } = "";
        public string Response { get; set; } = "";
    }

    private RoomType? MatchRoomType(string input)
    {
        return Store.RoomTypes
            .FirstOrDefault(rt => input.Contains(rt.Name, StringComparison.OrdinalIgnoreCase));
    }

    private async Task AskBot()
    {
        if (string.IsNullOrWhiteSpace(userQuestion))
            return;
        
        string response = GenerateResponse(userQuestion.Trim());
        chatHistory.Add(new ChatEntry
        {
            Question = userQuestion,
            Response = response
        });
        userQuestion = string.Empty;

        await InvokeAsync(StateHasChanged);
    }

    private string GenerateResponse(string question)
    {
        // Handle price prediction
        if (question.Contains("price", StringComparison.OrdinalIgnoreCase))
        {
            var monthMatch = GetMonthFromQuestion(question);
            var roomMatch = MatchRoomType(question);

            int? monthIndex = monthMatch?.Item2; // get the index
            string? roomType = roomMatch?.Name;

            var avgPrice = Predictor.PredictAveragePrice(monthIndex, roomType);

            if (avgPrice == 0)
                return "Sorry, I couldn't find any matching records to calculate the price.";
            
            if(roomType != null && monthMatch != null)
                return $"The average price for {roomType} room in {monthMatch?.Item1} is {avgPrice:C}.";
            else if(roomType != null)
                return $"The average price for {roomType} room is {avgPrice:C}.";
            else if(monthMatch != null)
                return $"The average price in {monthMatch?.Item1} is {avgPrice:C}.";
            else
                return $"The average price is {avgPrice:C}.";
        }
        
        // Handle availability prediction
        if (question.Contains("availability", StringComparison.OrdinalIgnoreCase) || question.Contains("available", StringComparison.OrdinalIgnoreCase))
        {
            var dateRange = Predictor.GetDateRangeFromPhrase(question);
            var matchedType = MatchRoomType(question);

            var availabilityRatio = Predictor.PredictRoomAvailability(dateRange.Start, dateRange.End, matchedType?.Name);
            var precentFree = Math.Round((1 - availabilityRatio) * 100);

            if (matchedType != null)
                return $"Estimated availability for {matchedType.Name} room from {dateRange.Start:dd MMM} to {dateRange.End:dd MMM} is {precentFree}% free.";
            else
                return $"Estimated general availability from {dateRange.Start:dd MMM} to {dateRange.End:dd MMM} is {precentFree}% free.";
        }

        return "Hmm, I didn't understand that. Try asking about price or availability, and include room type or month if you wish.";
    }

    private (string, int)? GetMonthFromQuestion(string input)
    {
        var months = DateTimeFormatInfo.InvariantInfo.MonthNames
            .Where(m => !string.IsNullOrWhiteSpace(m))
            .Select((name, index) => (Name: name, Index: index + 1));

        foreach (var (name, index) in months)
        {
            if (input.Contains(name, StringComparison.OrdinalIgnoreCase))
                return (name, index);
        }
        
        return null;
    }
}