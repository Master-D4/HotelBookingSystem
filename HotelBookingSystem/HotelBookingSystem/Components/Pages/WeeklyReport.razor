@page "/weeklyReport"
@rendermode InteractiveServer

@using HotelBookingSystem.Services
@using HotelBookingSystem.Helpers
@inject MemoryStore Store
@inject ToastService ToastService

@using ChartJs.Blazor
@using ChartJs.Blazor.ChartJS.BarChart
@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.Common.Enums

<h3 class="mb-4">Weekly Report</h3>

<div class="d-flex align-items-center mb-3">
    <button class="btn btn-outline-secondary me-2" @onclick="PreviousWeek">
        Previous
    </button>
    <strong class="me-2">
        @weekStart.ToFormattedDyd() TO @weekEnd.ToFormattedDyd()
    </strong>
    <button class="btn btn-outline-secondary" @onclick="NextWeek">
        Next
    </button>
</div>

@if (weeklyData.Any())
{
    <table class="table table-bordered">
        <thead>
        <tr>
            <th>Day</th>
            <th># of Bookings</th>
            <th>Special Requests</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var entry in weeklyData)
        {
            <tr>
                <td>
                    @* @entry.Day *@
                    @($"{entry.Day}, {entry.Date:dd MMM}")
                </td>
                <td>
                    <strong>@entry.BookingCount</strong>
                </td>
                <td>
                    @if (entry.SpecialRequests.Any())
                    {
                        <ul class="mb-0">
                            @foreach (var request in entry.SpecialRequests)
                            {
                                <li>
                                    @request
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <em class="text-muted">
                            None
                        </em>
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <div class="alert alert-info">
        No booking found for this week.
    </div>
}

@code {
    private DateTime weekStart = DateTime.Today.StartOfWeek(DayOfWeek.Monday);
    private DateTime weekEnd => weekStart.AddDays(6);

    private List<WeeklySummary> weeklyData = new();

    protected override void OnInitialized()
    {
        LoadWeeklyData();
    }

    void LoadWeeklyData()
    {
        weeklyData.Clear();

        foreach (DayOfWeek day in Enum.GetValues(typeof(DayOfWeek)))
        {
            DateOnly current = DateOnly.FromDateTime(weekStart.AddDays((int)day));
            var bookings = Store.Bookings.Where(b => b.CheckIn == current).ToList();
            
            weeklyData.Add(new WeeklySummary
            {
                Day = day.ToString(),
                Date = current,
                BookingCount = bookings.Count,
                SpecialRequests = bookings
                    .Where(b => !string.IsNullOrWhiteSpace(b.SpecialRequest))
                    .Select(b => b.SpecialRequest!)
                    .ToList()
            });
        }
    }

    public class WeeklySummary
    {
        public string Day { get; set; } = "";
        public DateOnly Date { get; set; }
        public int BookingCount { get; set; }
        public List<string> SpecialRequests { get; set; } = new ();
    }

    void PreviousWeek()
    {
        weekStart = weekStart.AddDays(-7);
        LoadWeeklyData();
    }

    void NextWeek()
    {
        weekStart = weekStart.AddDays(7);
        LoadWeeklyData();
    }
}